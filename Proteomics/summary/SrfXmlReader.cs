using System;
using System.Collections.Generic;
using System.Xml;

namespace RCPA.Proteomics.Summary
{
  public class SrfXmlReader : IFileReader<List<IIdentifiedProtein>>
  {
    private static string proteinTag = "protein";
    private static string peptideTag = "peptide";

    private IdentifiedProtein ReadIndividualProtein(XmlTextReader reader)
    {
      IdentifiedProtein result = new IdentifiedProtein();
      Dictionary<string, string> elements = new Dictionary<string, string>();
      String nodeName = "";
      while (reader.Read())
      {
        switch (reader.NodeType)
        {
          case XmlNodeType.Element:
            if (reader.Name.Equals(peptideTag))
            {
              result.Peptides.Add(ReadIndividualPeptide(reader, result.Name).Peptide);
            }
            else
            {
              nodeName = reader.Name;
            }
            break;
          case XmlNodeType.Text:
            if (nodeName.Equals("reference"))
            {
              result.Reference = reader.Value;
            }
            else
            {
              elements.Add(nodeName, reader.Value);
            }
            break;
          case XmlNodeType.EndElement:
            if (reader.Name.Equals(proteinTag))
            {
              AssignProteinValue(result, elements);
              return result;
            }
            break;
        }
      }
      return result;
    }

    private void AssignProteinValue(IIdentifiedProtein result, Dictionary<string, string> elements)
    {
      result.Score = MyConvert.ToDouble(elements["protein_probability"]);
      result.Coverage = MyConvert.ToDouble(elements["coverage"]);
      result.MolecularWeight = MyConvert.ToDouble(elements["weight"]);
    }

    private IIdentifiedSpectrum ReadIndividualPeptide(XmlTextReader reader, string protein)
    {
      IIdentifiedSpectrum result = new IdentifiedSpectrum();
      Dictionary<string, string> elements = new Dictionary<string, string>();
      String nodeName = "";
      while (reader.Read())
      {
        switch (reader.NodeType)
        {
          case XmlNodeType.Element:
            nodeName = reader.Name;
            break;
          case XmlNodeType.Text:
            elements.Add(nodeName, reader.Value);
            break;
          case XmlNodeType.EndElement:
            if (reader.Name.Equals(peptideTag))
            {
              AssignPeptideValue(result, elements, protein);
              return result;
            }
            break;
        }
      }
      return result;
    }

    private void AssignPeptideValue(IIdentifiedSpectrum result, Dictionary<string, string> elements, string protein)
    {
      result.Query.FileScan.Scan = elements["file"];

      IIdentifiedPeptide sp = new IdentifiedPeptide(result);
      sp.Sequence = elements["sequence"];
      sp.AddProtein(protein);

      result.TheoreticalMH = MyConvert.ToDouble(elements["mass"]);
      result.ExperimentalMH = result.TheoreticalMH - MyConvert.ToDouble(elements["deltamass"]);
      result.Query.Charge = int.Parse(elements["charge"]);
      result.Score = MyConvert.ToDouble(elements["xcorr"]);
      double DeltaScore = MyConvert.ToDouble(elements["deltacn"]);
      result.DeltaScore = Math.Min(1.0, DeltaScore);
      result.SpScore = MyConvert.ToDouble(elements["sp"]);
      result.SpRank = int.Parse(elements["rsp"]);
      result.Ions = elements["ions"];
      return;
    }

    #region IFileFormat<List<IIdentifiedProtein>> Members

    public List<IIdentifiedProtein> ReadFromFile(string filename)
    {
      List<IIdentifiedProtein> result = new List<IIdentifiedProtein>();
      XmlTextReader reader = new XmlTextReader(filename);
      string nodeName = "";
      string rawFilename = "";
      while (true)
      {
        //Sometimes, XML generated by bioworks contains more than one </protein> at end of file,
        //an XmlException will be thrown.
        try
        {
          if (!reader.Read())
          {
            break;
          }
        }
        catch (System.Xml.XmlException)
        {
          break;
        }

        switch (reader.NodeType)
        {
          case XmlNodeType.Element: // The node is an element.
            if (reader.Name.Equals(proteinTag))
            {
              result.Add(ReadIndividualProtein(reader));
            }
            else
            {
              nodeName = reader.Name;
            }
            break;
          case XmlNodeType.Text: //Display the text in each element.
            if (nodeName.Equals("origfilename"))
            {
              rawFilename = FileUtils.ChangeExtension(reader.Value, "");
            }
            break;
          case XmlNodeType.EndElement: //Display the end of the element.
            break;
        }
      }

      foreach (IIdentifiedProtein protein in result)
      {
        foreach (IIdentifiedPeptide peptide in protein.Peptides)
        {
          peptide.Spectrum.Query.FileScan.Experimental = rawFilename;
        }
      }
      return result;
    }

    #endregion
  }
}
